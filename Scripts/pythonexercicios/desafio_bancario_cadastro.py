'''
        ¬´¬´¬´ Projeto do Curso de Python da Dio.me ¬ª¬ª¬ª
        
-> Este programa aborda v√°rios conceitos fundamentais de Python, como: 
- Loop: utiliza√ß√£o de while e for para repeti√ß√£o de c√≥digo
- Condicionais: uso de if, elif e else para executar diferentes trechos de c√≥digo
- Fun√ß√µes: cria√ß√£o e uso de fun√ß√µes para tornar o c√≥digo mais modular e reutiliz√°vel
- Modulariza√ß√£o: utiliza√ß√£o de m√≥dulos para organizar e separar o c√≥digo em arquivos diferentes
- Manipula√ß√£o de strings: utiliza√ß√£o de m√©todos para manipular strings, como format, split, join e slicing
- Listas e dicion√°rios: cria√ß√£o e manipula√ß√£o de listas e dicion√°rios para armazenar informa√ß√µes
- Utiliza√ß√£o de outras bibliotecas e ferramentas: Biblioteca "termcolor" para colorir o output do console e a tabela de cores ANSI. Fun√ß√µes "letreiro" e "letreiro_2" do arquivo "letreiro.py" para criar letreiros coloridos na tela. 
- Tratamento de erros e exce√ß√µes: utiliza√ß√£o de try/except para tratar erros e exce√ß√µes em tempo de execu√ß√£o
- Aninhamento de fun√ß√µes: utiliza√ß√£o de fun√ß√µes dentro de fun√ß√µes para modularizar ainda mais o c√≥digo
- Docstrings e argumentos opcionais: utiliza√ß√£o de docstrings para documentar o c√≥digo e argumentos opcionais em algumas fun√ß√µes para aumentar a flexibilidade

-> O objetivo deste programa √© simular um sistema banc√°rio simples, com as seguintes funcionalidades:
# - Dep√≥sito em conta banc√°ria
# - Saque em conta banc√°ria (com limite de saques e limite de valor por saque)
# - Exibi√ß√£o do extrato banc√°rio (hist√≥rico de dep√≥sitos e saques)
# - Cadastro de usu√°rios e contas banc√°rias
# - Listagem de usu√°rios e contas banc√°rias

-> Para alcan√ßar esse objetivo, o programa utiliza as seguintes fun√ß√µes do arquivo funcoes.bancarias.py:
# - deposito: realiza o dep√≥sito em uma conta banc√°ria e atualiza o saldo e o hist√≥rico de dep√≥sitos
# - saque: realiza o saque em uma conta banc√°ria e atualiza o saldo, o limite de saques e o hist√≥rico de saques
# - gerar_extrato: exibe na tela o extrato banc√°rio, mostrando o hist√≥rico de dep√≥sitos e saques
# - cadastro_usuario: cadastra um novo usu√°rio e adiciona √† lista de usu√°rios cadastrados
# - cadastro_conta: cadastra uma nova conta banc√°ria para um usu√°rio existente e adiciona √† lista de contas cadastradas
# - lista_usuarios: exibe na tela a lista de usu√°rios cadastrados
# - lista_contas: exibe na tela a lista de contas cadastradas
'''


# Importa as fun√ß√µes "letreiro" e "letreiro_2" do arquivo "letreiro.py"
from letreiro import letreiro, letreiro_2

# Importa todas as fun√ß√µes do arquivo "funcoes_bancaria.py"
from funcoes_bancaria import *

# Limpa a tela do console
limpa_tela()

# Cria um letreiro de boas-vindas com as cores "magenta" e "light_blue"
letreiro('Bem vindo ao Banco MMC', 'magenta', 'light_blue') 

# Define um menu com op√ß√µes numeradas, utilizei a tabela de cores ANSI.
menu = """
<<<  \033[36mMenu\033[0m  >>>

[\033[1;33m1\033[0m] Depositar
[\033[33m2\033[0m] Sacar
[\033[33m3\033[0m] Extrato
[\033[1;33m4\033[0m] Cadastrar usu√°rio
[\033[33m5\033[0m] Cadastrar Conta Banc√°ria
[\033[1;33m6\033[0m] Listar usu√°rios
[\033[1;33m7\033[0m] Listar Contas
[\033[30m0\033[0m] Sair

\033[36mEscolha uma op√ß√£o =>\033[0m """

# Cria duas listas vazias, "cadastro_usuarios" e "cadastro_contas"
cadastro_usuarios, cadastro_contas = list(), list()

saldo = 0
relacao_depositos, relacao_saques = '', ''
limite = 500
numero_saques = 0
vlr_saque = 0

    # Loop para tratar do menu principal, encerra somente se digitar zero.
while True:
    # o loop somente ser√° encerrado se o usu√°rio digitar uma das op√ß√µees.
    while True:
        try:
            opcao = int(input(menu))
            break
        except (ValueError, AttributeError):
            print(colored('Valor inv√°lido!', 'light_red'))
            sleep(.5)

    # Op√ß√£o 1 - efetua dep√≥sito.
    if opcao == 1:
        saldo, relacao_depositos = deposito(saldo, relacao_depositos)

    # Op√ß√£o 2 - efetua saque
    elif opcao == 2:
        numero_saques, vlr_saque, saldo, relacao_saques = saque(numero_saques = numero_saques, vlr_saque = vlr_saque, saldo = saldo, relacao_saques = relacao_saques)

    # Op√ß√£o 3 - mostra na tela o extrato   
    elif opcao == 3:
        gerar_extrato(relacao_depositos, relacao_saques, saldo)

    # Op√ß√£o 4 - Cadastro de Usu√°rio
    elif opcao == 4:
        # Chama a fun√ß√£o de cadastro de usu√°rio e passa a lista de usu√°rios como argumento
        cadastro_usuario(cadastro_usuarios)

    # Op√ß√£o 5 - Cadastro de Conta Banc√°ria
    elif opcao == 5:
        # Chama a fun√ß√£o de cadastro de conta e passa as listas de usu√°rios e contas como argumentos
        cadastro_conta(cadastro_usuarios, cadastro_contas)

    # Op√ß√£o 6 - Listagem de Usu√°rios
    elif opcao == 6:
        # Chama a fun√ß√£o de listagem de usu√°rios e passa a lista de usu√°rios como argumento
        lista_usuarios(cadastro_usuarios)

    # Op√ß√£o 7 - Listagem de Contas Banc√°rias
    elif opcao == 7:
        # Chama a fun√ß√£o de listagem de contas e passa a lista de contas como argumento
        lista_contas(cadastro_contas)
        
    # Op√ß√£o 0 - Sair do programa
    elif opcao == 0:
        # Encerra o loop principal e finaliza o programa
        break

    # Op√ß√£o inv√°lida
    else:
        print(colored("Op√ß√£o inv√°lida, selecione novamente a op√ß√£o desejada.", 'light_magenta'))
        sleep(.5)

# Exibe mensagem de agradecimento ao usu√°rio
letreiro_2('üëç Obrigado por usar os nossos servi√ßos!', 'white', 'light_blue') 
