from time import sleep
from termcolor import colored
from datetime import date

def limpa_tela():
    import os
    '''
    limpa a tela do terminal
    '''
    
    os.system('cls' if os.name == 'nt' else 'clear')


def moeda(p, coin='R$'):
    """
    Retorna uma string formatada com o valor monet√°rio e a moeda especificada.

    Args:
        p (float): O valor monet√°rio a ser formatado.
        coin (str, optional): A moeda a ser utilizada na formata√ß√£o. Valor padr√£o √© 'R$'.

    Returns:
        str: A string formatada com o valor monet√°rio e a moeda especificada.
    """
    return f'{coin} {p:.2f}'.replace('.', ',')


def deposito(saldo, relacao_depositos):
    """Realiza um dep√≥sito na conta banc√°ria especificada.

    Args:
        saldo (float): O saldo atual da conta banc√°ria.
        qtde_depositos (str): A string que armazena a quantidade e valores de dep√≥sitos feitos na conta.

    Returns:
        Tuple[float, str]: Uma tupla contendo o novo saldo da conta banc√°ria e a string 'qtde_depositos' atualizada.
    """
    # Entra em um loop infinito para receber o valor do dep√≥sito at√© que seja v√°lido
    print(colored('Para voltar ao menu principal, digite 0 a qualquer momento.', 'grey'))
    while True:
        try:
            vlr_deposito = float(input(colored('\nQual o valor do dep√≥sito? R$ ', 'light_magenta')))

            if volta_menu(vlr_deposito): #funcao para retornar ao menu principal caso o usu√°rio desista do cadastro, basta digitar '0' e apertar enter.
                break
            
            if vlr_deposito > 0:
                # Adiciona o valor do dep√≥sito ao saldo da conta
                saldo += vlr_deposito
                # Atualiza a string 'relacao_depositos' com o valor do novo dep√≥sito
                relacao_depositos += f"{moeda(vlr_deposito)}\n"
                print(colored('üí∞ Dep√≥sito realizado com sucesso! üí∞', 'light_yellow'))
                sleep(.5) #funcao moeda, formata por padrao o numero em moeda BRL.
                break
            else:
                # Informa ao usu√°rio que o valor √© inv√°lido e pede que insira novamente
                print('O valor deve ser maior do que zero. Tente novamente.')
        except ValueError:
            # Informa ao usu√°rio que o valor √© inv√°lido e pede que insira novamente
            print('Digite somente numeros. Tente novamente.')
        

    # Retorna uma tupla contendo o novo saldo da conta banc√°ria e a string 'qtde_depositos' atualizada
    return saldo, relacao_depositos


def saque(numero_saques, vlr_saque, saldo, relacao_saques):
    """
    Realiza o saque de um determinado valor a partir do saldo dispon√≠vel,
    desde que sejam atendidas algumas condi√ß√µes, como quantidade de saques
    di√°rios e valor m√°ximo de saque.

    Args:
        numero_saques (int): o n√∫mero de saques j√° realizados naquele dia.
        vlr_saque (float): o valor a ser sacado.
        saldo (float): o saldo dispon√≠vel para saque.
        relacao_saques (str): uma string com os valores sacados e depositados.

    Returns:
        tuple: uma tupla contendo o n√∫mero de saques realizados, o valor sacado,
        o saldo restante e a rela√ß√£o de saques atualizada.

    Raises:
        ValueError: caso o valor de saque n√£o seja um n√∫mero inteiro.

    Examples:
        >> saque(2, 100, 500, "")
        (3, 100, 400, '(-R$100)\n')
    """

    LIMITE_SAQUES = 3  # define a constante LIMITE_SAQUES com o valor 3
    
    print(colored('Para voltar ao menu principal, digite 0 a qualquer momento.', 'grey'))

    while True:
        try:
            # solicita ao usu√°rio o valor do saque e converte para inteiro
            vlr_saque = int(input(colored('Quer sacar quanto? R$ ', 'light_blue')))

            # verifica se o usu√°rio deseja voltar ao menu principal e encerra o loop
            if volta_menu(vlr_saque):
                break
            
            # verifica se o n√∫mero de saques √© maior ou igual ao limite de saques permitido e encerra o loop
            if numero_saques >= LIMITE_SAQUES:
                print('Quantidade de saques acima do limite di√°rio.')
                sleep(1)
                break
            
            # verifique se o valor inserido pelo usu√°rio eh positivo e multiplo de 10.
            if vlr_saque <= 0 or vlr_saque % 10 != 0:
                print('Valor tem que ser maior que 0 e multiplo de 10. Tente novamente.')
            
            elif vlr_saque > 500:
                print('Valor de saque acima do limite de R$ 500')
            
            elif saldo < vlr_saque:
                print(f"Saldo insuficiente! Seu saldo atual √© {colored(moeda(saldo), 'light_yellow')}")
                sleep(2)
                break
            else:
                # contador para o n√∫mero de saques realizados
                numero_saques += 1
                # subtrai o valor do saque do saldo atual
                saldo -= vlr_saque
                # adiciona a rela√ß√£o de saques uma string formatada no padrao moeda BRL indicando o valor do saque 
                relacao_saques += f"(\033[31m-\033[m){moeda(vlr_saque)}\n"
               
                print(colored('Aguarde a contagem das notas \n', 'light_magenta'), end = '')
                
                for i in range(1, 7):
                    print('üíµ ', end = '', flush = True) 
                    sleep(0.3)
                
                print(colored(f'\nOperac√£o realizada com sucesso!', 'light_yellow'))
                sleep(.7)
                break

        # trata a exce√ß√£o ValueError, caso o usu√°rio digite um valor que n√£o seja um n√∫mero inteiro
        except ValueError:
            print('Digite somente numero inteiro. Tente novamente.')        
                 
    # Retorna o n√∫mero de saques, o valor sacado, o saldo atualizado e a rela√ß√£o de saques realizados para serem usados em outras fun√ß√µes.            
    return numero_saques, vlr_saque, saldo, relacao_saques


def gerar_extrato(relacao_depositos, relacao_saques, saldo):
    """
    Gera um extrato banc√°rio com as rela√ß√µes de dep√≥sitos e saques e o saldo atual.

    Par√¢metros:
    -----------
    relacao_depositos : str
        String contendo a rela√ß√£o de dep√≥sitos realizados.
    relacao_saques : str
        String contendo a rela√ß√£o de saques realizados.
    saldo : float
        Saldo atual da conta.

    Retorna:
    --------
    None
    """

    # Obt√©m a data atual.
    today = f"{date.today().day}-{date.today().month}-{date.today().year}"

    print(f"\n+{colored(' EXTRATO ', 'light_green'):.^40}+")
    sleep(.5)

    print(f"\033[33m{today:^34}\033[0m")

    # Verifica se n√£o houve nenhuma movimenta√ß√£o na conta.
    if not relacao_saques and not relacao_depositos: 
        print('\nN√£o foram realizadas movimenta√ß√µes.\n')
    else:
        # Imprime a rela√ß√£o de dep√≥sitos.
        print(f"{colored('Depositos', 'cyan')} \n{relacao_depositos}")

        # Imprime a rela√ß√£o de saques.
        print(f"{colored('Saques:', 'cyan')} \n{relacao_saques}\n")

    # Imprime o saldo atual formatada em moeda BRL pela funcao moeda().
    print(f"{colored('Saldo Atual:', 'yellow')} {moeda(saldo)}")
    sleep(1)

    print(f"+{'.':.^31}+")

    input(colored("Pressione a tecla ENTER para retornar ao menu principal.", 'grey'))


def cadastro_usuario(cadastro_usuarios):
    """
    Cria um novo usu√°rio no sistema a partir das informa√ß√µes fornecidas pelo usu√°rio.

    Args:
        cadastro_usuarios (list): Uma lista de dicion√°rios contendo informa√ß√µes de todos os usu√°rios cadastrados no sistema.

    Returns:
        list: Uma lista atualizada de dicion√°rios contendo informa√ß√µes de todos os usu√°rios cadastrados no sistema, incluindo o novo usu√°rio criado.
    """
    print(colored('Para voltar ao menu principal, digite 0 a qualquer momento.', 'grey'))

    #O loop s√≥ √© encerrado qdo o usuario inserir os 11 digitos do CPF.
    while True: 
        cpf = input(colored("Informe o CPF (somente n√∫meros): ", 'light_cyan')).strip()

        #funcao para retornar ao menu principal caso o usu√°rio desista do cadastro, basta digitar '0' e apertar enter.
        if volta_menu(cpf): 
            return    
        #funcao para verificar se o input eh uma sequencia X digitos (tamanho) e se eh somente de numeros. 
        if is_numeric(cpf, 11): 
            break
    #funcao para formatar o numero fornecido pelo usu√°rio no padr√£o CPF brasileiro.
    cpf = format_cpf(cpf) 
    #verifica em cada dicion√°rio dentro da lista se o cpf cadastrado j√° existe.
    for usuario in cadastro_usuarios: 
        if cpf == usuario['cpf']:
            print(colored('J√° existe usu√°rio com esse CPF!', 'light_magenta'))
            sleep(1)
            return
        
    nome = input(colored('Informe o nome completo: ', 'light_cyan')).strip()
    #funcao para retornar ao menu principal caso o usu√°rio desista do cadastro, basta digitar '0' e apertar enter.
    if volta_menu(nome): 
        return 
    #enquanto o usuario n√£o inserir os 6 digitos da data de nascimento o loop continua.
    while True: 
        data_nascimento = input(colored('Informe a data de nascimento (DDMMAA). ', 'light_cyan')).strip()

        if volta_menu(data_nascimento):
            return
        #funcao para verificar se o input eh uma sequencia X digitos (tamanho) e se eh somente de numeros.
        if is_numeric(data_nascimento, tamanho=6):  
            break 
    
    endereco = input(colored("Informe o endere√ßo (logradouro, nro - bairro - cidade/sigla estado): ", 'light_cyan')).strip()
    if volta_menu(endereco):
        return 
    #cria um dicion√°rio dentro da lista cadastro_usurios com as informac√µes de cada usu√°rio. format_data() -> formata data inserida pelo usu√°rio em dd/mm/aa.
    cadastro_usuarios.append({'cpf': cpf, 'nome': nome, 'data_nascimento': format_data(data_nascimento), 'endere√ßo': endereco}) 

    print()
    print(colored("=== Usu√°rio criado com sucesso! ===", 'light_yellow'))
    sleep(1)
    # retorna a lista cadastro_usuarios atualizada para ser usada por outras fun√ß√µes.
    return cadastro_usuarios


def lista_usuarios(cadastro_usuarios):
    """
    Exibe uma lista com os usu√°rios cadastrados, mostrando suas informa√ß√µes pessoais.

    Args:
        cadastro_usuarios (list): lista de dicion√°rios com as informa√ß√µes dos usu√°rios.
    """
    print()
    print('\033[33m-\033[0m' * 16, '¬´¬´¬´  \033[33mLista de usu√°rios\033[0m  ¬ª¬ª¬ª', '\033[33m-\033[0m' * 16)

    # Verifica se a lista est√° vazia
    if len(cadastro_usuarios) == 0:
        print('\nNao existe usu√°rios cadastrados!\n') 
    else:
        # Itera sobre a lista de cadastro_usu√°rios
        for usuario in cadastro_usuarios:
            # Itera sobre o dicion√°rio do usu√°rio para imprimir a chave e o valor.
            for key, value in usuario.items():
                print(f'\033[36m{key}:\033[0m {value}\n')
            # Imprime uma linha de separa√ß√£o entre os usu√°rios, exceto no √∫ltimo
            if usuario is not cadastro_usuarios[-1]:
                print(colored('-' * 61, 'light_yellow'))
            # Aguarda um curto per√≠odo para melhorar a legibilidade
            sleep(.3)
    
    # Imprime uma mensagem de fim de lista
    print('\033[33m-\033[0m' * 19, '¬´¬´¬´  \033[33mFim da Lista\033[0m  ¬ª¬ª¬ª', '\033[33m-\033[0m' * 18)
    # Aguarda a entrada do usu√°rio para continuar no intuito de melhorar a visualizacao da lista.
    input(colored("Pressione a tecla ENTER para retornar ao menu principal.", 'grey')) 


def cadastro_conta(cadastro_usuarios, cadastro_contas):
    """
    Essa fun√ß√£o √© respons√°vel por criar uma nova conta banc√°ria para um usu√°rio j√° cadastrado.

    Args:
        cadastro_usuarios (list): Uma lista com os dados de cadastro de todos os usu√°rios.
        cadastro_contas (list): Uma lista com os dados de todas as contas banc√°rias.

    Returns:
        None

    """
    AGENCIA = '0001'
    conta = len(cadastro_contas) + 1 # contador para cadastrar um nr de conta diferente.

    # Mensagem informando como voltar para o menu principal
    print(colored('Para voltar ao menu principal, digite 0 a qualquer momento.', 'grey'))
    # Mensagem com os dados da ag√™ncia e conta corrente da nova conta
    print(f'\033[33mAgencia:\033[m {AGENCIA} \n\033[33mConta Corrente:\033[m {conta}')

    while True:
        cpf_usuario = input(colored("Informe o CPF (somente n√∫meros): ", 'light_cyan')).strip()

        # Verifica se o usu√°rio deseja voltar para o menu principal digitando 0 e apertando enter.
        if volta_menu(cpf_usuario):
            return
        
        # Verifica se o CPF informado √© somente numeros e no total de 11 digitos.
        if is_numeric(cpf_usuario, 11):
            break      

    cpf_usuario = format_cpf(cpf_usuario)

    # Verifica se o CPF informado est√° cadastrado
    for usuario in cadastro_usuarios:
        if cpf_usuario == usuario['cpf']:
            cadastro_contas.append({'agencia': AGENCIA, 'conta': conta, 'usuario': cpf_usuario})
            
            # Mensagem informando que a conta foi criada com sucesso
            print()
            print(colored('=== Conta criada com sucesso! ===', 'light_green'))
            sleep(1)
            return
    
    # Mensagem de erro caso o CPF n√£o esteja cadastrado
    print(colored('CPF n√£o encontrado no cadastro de usu√°rios. Certifique-se que digitou os 11 digitos.', 'light_magenta'))
    sleep(1)

    
def lista_contas(cadastro_contas):
    """
    Essa fun√ß√£o √© respons√°vel por exibir uma lista com todas as contas banc√°rias cadastradas.

    Args:
        cadastro_contas (list): Uma lista com os dados de todas as contas banc√°rias.

    Returns:
        None

    """
    # T√≠tulo da lista de contas
    print()
    print('\033[32m-\033[0m' * 6, '¬´¬´¬´  \033[32mLista de Contas\033[0m  ¬ª¬ª¬ª', '\033[32m-\033[0m' * 6)

    # Verifica se n√£o existem contas cadastradas
    if len(cadastro_contas) == 0:
        print('\nNao existe contas cadastradas!\n') 
    else:
        # Percorre a lista de contas e exibe os dados (chave e valor) de cada uma
        for conta in cadastro_contas:
            for key, value in conta.items():
                print(f'\033[33m{key}:\033[0m {value}\n')
            # Adiciona uma linha separadora entre as contas (exceto a √∫ltima)
            if conta is not cadastro_contas[-1]:
                print(colored('-' * 41, 'light_yellow'))
            # Espera 0.3 segundos antes de exibir a pr√≥xima conta
            sleep(.3)

    # Mensagem informando o fim da lista de contas
    print('\033[32m-\033[0m' * 8, '¬´¬´¬´  \033[32mFim da Lista\033[0m  ¬ª¬ª¬ª', '\033[32m-\033[0m' * 7)
    # Aguarda a pressionar da tecla ENTER para retornar ao menu principal
    input(colored("Pressione a tecla ENTER para retornar ao menu principal.", 'grey'))


def format_cpf(id):
    """
    Formata um n√∫mero inteiro de 11 d√≠gitos no formato de CPF do Brasil.
    :param cpf: o n√∫mero inteiro de 11 d√≠gitos a ser formatado
    :return: a string formatada no formato de CPF
    """
    cpf = str(id)
    return f'{cpf[:3]}.{cpf[3:6]}.{cpf[6:9]}-{cpf[9:]}'

  
def format_data(date):
    """
    Essa fun√ß√£o √© respons√°vel por formatar uma data no formato DDMMYYYY para o formato DD/MM/YYYY.

    Args:
        date (str): Uma string contendo uma data no formato DDMMYYYY.

    Returns:
        str: A data formatada no formato DD/MM/YYYY.

    """
    # Formata a data no formato DD/MM/YYYY usando o a tecnica de slicing
    return f'{date[:2]}/{date[2:4]}/{date[4:]}'


def volta_menu(vlr):
    """
    Verifica se o valor de entrada √© igual a '0' e, se for, retorna uma mensagem de opera√ß√£o cancelada.

    Args:
        vlr (int or str): O valor de entrada a ser verificado.

    Returns:
        bool: True se o valor de entrada for igual a '0', False caso contr√°rio.
    """
    if vlr == '0' or vlr == 0:
        print(colored("Opera√ß√£o cancelada pelo usu√°rio.", 'light_yellow'))
        sleep(.5)
        return True   


def is_numeric(num, tamanho = 11):
    """
    Verifica se a string inserida pelo usu√°rio cont√©m apenas n√∫meros e possui o tamanho correto.

    Args:
        num (str): A string inserida pelo usu√°rio.
        tamanho (int): O tamanho correto que a string deve ter (padr√£o = 11 para CPF).

    Returns:
        bool: Retorna True se a string √© num√©rica e tem o tamanho correto, caso contr√°rio retorna False e exibe uma mensagem de erro.
    """
    #Verifica se a string 'num' cont√©m apenas caracteres num√©ricos
    if num.isnumeric():
        # Verifica se a string 'num' possui o tamanho correto, definido pelo par√¢metro 'tamanho'
        if len(num) == tamanho:
            return True
        else:
            # Caso a string n√£o possua o tamanho correto, exibe uma mensagem de erro e aguarda meio segundo
            num = 'CPF' if tamanho == 11 else 'Data de Nascimento'
            print(f"{num} deve ter {tamanho} d√≠gitos. Tente novamente.")
            sleep(.5)
    else:
        # Caso a string n√£o possua apenas caracteres num√©ricos, exibe uma mensagem de erro e aguarda meio segundo
        print("Somente n√∫meros devem ser inseridos. Tente novamente.")  
        sleep(.5)

if __name__ == '__main__':
    #print(deposito())
    #print(cadastro_usuario())
    #print(cadastro_conta())
    help(saque)